const startWorkers = (startCount = 0) => {
  // Clear old workers
  workers.forEach(worker => worker.terminate())
  setWorkers([])
  setWorkerCounts({})
  setWorkerSpeeds({})
  
  // Reset state
  setProgress(0)
  resetGeneration(startCount)
  setResult(null)

  try {
    const newWorkers: Worker[] = []
    
    // Use CPU workers
    const targetWorkers = Math.max(1, Math.floor((maxWorkers * cpuUsage) / 100))
    const countPerWorker = Math.floor(startCount / targetWorkers)
    
    for (let i = 0; i < targetWorkers; i++) {
      // Fix the worker path - it should be relative to the current page
      const workerPath = './worker.js'  // Use relative path
      
      console.log('Creating worker at path:', workerPath)
      
      const worker = new Worker(workerPath)
      
      worker.onerror = (error) => {
        console.error('Worker error:', error)
      }
      
      worker.onmessage = (e) => {
        const { type, privateKey, publicId, error, count, speed, workerId } = e.data
        console.log('Worker message:', { type, count, speed, workerId })

        if (type === 'progress') {
          setWorkerCounts(prev => ({
            ...prev,
            [workerId]: count
          }))
          setWorkerSpeeds(prev => ({
            ...prev,
            [workerId]: speed
          }))
        } else if (type === 'count') {
          setWorkerCounts(prev => ({
            ...prev,
            [workerId]: count
          }))
        } else if (type === 'success') {
          handleSuccess(privateKey, publicId)
        } else if (type === 'error') {
          console.error('Error generating address:', error)
          setIsGenerating(false)
          setIsPaused(false)
          setGenerationSpeed(0)
          
          newWorkers.forEach(w => w.terminate())
          setWorkers([])
          
          toast({
            title: t('toast.error'),
            description: t('toast.errorGenerating', { error }),
            variant: "destructive"
          })
        }
      }

      worker.postMessage({
        type: 'start',
        pattern,
        isPrefix: patternType === 'prefix',
        startCount: countPerWorker,
        workerId: i
      })

      newWorkers.push(worker)
    }

    setWorkers(newWorkers)
  } catch (error) {
    console.error('Error starting workers:', error)
    setIsGenerating(false)
    setIsPaused(false)
    setGenerationSpeed(0)
    toast({
      title: t('toast.error'),
      description: t('toast.errorStarting'),
      variant: "destructive"
    })
  }
}
